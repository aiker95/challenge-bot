import asyncio
import logging
from datetime import datetime
from dotenv import load_dotenv
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

from db.models import Base, User, Completion
from handlers.commands import cmd_result, cmd_result_all, cmd_result_month, cmd_result_step, cmd_help

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine(os.getenv("DB_URL"))
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
Base.metadata.create_all(bind=engine)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
registration_states = {}

@dp.message(Command("start"))
async def cmd_start(message: Message):
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    
    if not user:
        registration_states[message.from_user.id] = {
            "step": 1,
            "data": {}
        }
        await message.answer("–î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    else:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

@dp.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    
    if user_id in registration_states:
        state = registration_states[user_id]
        
        if state["step"] == 1:
            state["data"]["name"] = message.text
            state["step"] = 2
            await message.answer("–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å? (1 —Å—Ç—Ä–æ–∫–∞)")
        elif state["step"] == 2:
            state["data"]["goal"] = message.text
            state["step"] = 3
            await message.answer("–ö–∞–∫–æ–π —Å–º–∞–π–ª–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç—á—ë—Ç–∞—Ö?")
        elif state["step"] == 3:
            state["data"]["emoji"] = message.text
            state["data"]["telegram_id"] = user_id
            
            session = SessionLocal()
            new_user = User(**state["data"])
            session.add(new_user)
            session.commit()
            
            del registration_states[user_id]
            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.")
    
    elif message.text.startswith("/complete"):
        try:
            date_str = message.text.split()[1]
            date = datetime.strptime(date_str, "%d.%m.%Y").date()
            
            session = SessionLocal()
            user = session.query(User).filter(User.telegram_id == user_id).first()
            
            if not user:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
                return
            
            existing_completion = session.query(Completion).filter(
                Completion.user_id == user.id,
                Completion.date == date
            ).first()
            
            if existing_completion:
                await message.answer("–í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É!")
                return
            
            new_completion = Completion(user_id=user.id, date=date)
            session.add(new_completion)
            session.commit()
            
            await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {date_str} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
            
        except (IndexError, ValueError):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    elif message.text.startswith("/result"):
        session = SessionLocal()
        if " " in message.text:
            await cmd_result(message, session)
        else:
            await cmd_result_all(message, session)
    elif message.text.startswith("/result_month"):
        session = SessionLocal()
        await cmd_result_month(message, session)
    elif message.text.startswith("/result_step"):
        session = SessionLocal()
        await cmd_result_step(message, session)
    elif message.text == "/help":
        await cmd_help(message)

async def on_startup(bot: Bot) -> None:
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await bot.delete_webhook()
    
    # –ü–æ–ª—É—á–∞–µ–º URL —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    webhook_url = os.getenv("WEBHOOK_URL")
    if webhook_url:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
        await bot.set_webhook(
            url=webhook_url,
            drop_pending_updates=True
        )

async def handle_root(request):
    return web.Response(
        text="Challenge Bot is running! üöÄ\n\nThis is a Telegram bot for group challenges and goal tracking.\n\nBot is available at @Zaruba_resbot",
        content_type="text/plain"
    )

async def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiohttp
    app = web.Application()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ URL
    app.router.add_get('/', handle_root)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_requests_handler.register(app, path="/webhook")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    setup_application(app, dp, bot=bot)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
    await site.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await on_startup(bot)
    
    # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main()) 