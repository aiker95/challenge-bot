import asyncio
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, BotCommand, BotCommandScopeDefault
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.exceptions import TelegramAPIError
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from sqlalchemy import select, text
from sqlalchemy.ext.asyncio import AsyncSession

from db.models import Base, User, Completion, create_async_engine_from_url, create_async_session

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_async_engine_from_url(os.getenv("DB_URL"))
async_session = create_async_session(engine)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
registration_states = {}
registration_locks = {}

class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self, limit=1):
        self.limit = limit
        self.last_time = {}
        super().__init__()

    async def __call__(self, handler, event, data):
        if not isinstance(event, types.Message):
            return await handler(event, data)
            
        user_id = event.from_user.id
        current_time = datetime.now().timestamp()
        
        if user_id in self.last_time:
            if current_time - self.last_time[user_id] < self.limit:
                logger.warning(f"User {user_id} is being throttled")
                return
        self.last_time[user_id] = current_time
        return await handler(event, data)

class LoggingMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        if isinstance(event, types.Message):
            logger.info(f"Handling message from user {event.from_user.id}: {event.text}")
        return await handler(event, data)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
dp.update.middleware(ThrottlingMiddleware())
dp.update.middleware(LoggingMiddleware())

@dp.errors()
async def error_handler(update: types.Update, exception: Exception):
    logger.error(f"Update {update} caused error {exception}")
    if isinstance(exception, TelegramAPIError):
        logger.error(f"Telegram API error: {exception}")
    return True

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    try:
        user_id = message.from_user.id
        logger.info(f"Received /start command from user {user_id}")
        
        # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if user_id not in registration_locks:
            registration_locks[user_id] = asyncio.Lock()
            logger.info(f"Created new lock for user {user_id}")
        
        logger.info(f"Acquiring lock for user {user_id}")
        async with registration_locks[user_id]:
            logger.info(f"Lock acquired for user {user_id}")
            async with async_session() as session:
                result = await session.execute(
                    User.__table__.select().where(User.telegram_id == user_id)
                )
                user = result.first()
                
                if not user:
                    registration_states[user_id] = {
                        "step": 1,
                        "data": {},
                        "lock": asyncio.Lock()
                    }
                    logger.info(f"Starting registration for user {user_id}")
                    await message.answer("–î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
                else:
                    logger.info(f"User {user_id} already registered")
                    await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            logger.info(f"Releasing lock for user {user_id}")
    except Exception as e:
        logger.error(f"Error in cmd_start: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("stop"))
async def cmd_stop(message: types.Message):
    try:
        user_id = message.from_user.id
        logger.info(f"Received /stop command from user {user_id}")
        
        async with async_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await session.execute(
                select(User)
                .where(User.telegram_id == user_id)
            )
            user = user.scalar_one_or_none()
            
            if not user:
                await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
                return
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await session.execute(
                Completion.__table__.delete()
                .where(Completion.user_id == user.id)
            )
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await session.execute(
                User.__table__.delete()
                .where(User.id == user.id)
            )
            
            await session.commit()
            await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
    except Exception as e:
        logger.error(f"Error in cmd_stop: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

@dp.message(Command("profile"))
async def cmd_profile(message: types.Message):
    try:
        user_id = message.from_user.id
        logger.info(f"Received /profile command from user {user_id}")
        
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await session.execute(
                select(User)
                .where(User.telegram_id == user_id)
            )
            user = user.scalar_one_or_none()
            
            if not user:
                await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            completions = await session.execute(
                select(Completion)
                .where(Completion.user_id == user.id)
                .order_by(Completion.date)
            )
            completions = completions.scalars().all()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            dates = await session.execute(
                select(Completion.date)
                .order_by(Completion.date)
            )
            dates = dates.scalars().all()
            
            total_days = 0
            if dates:
                first_date = dates[0]
                last_date = dates[-1]
                total_days = (last_date - first_date).days + 1
            
            profile_message = (
                f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                f"–ò–º—è: {user.name}\n"
                f"–¶–µ–ª—å: {user.goal}\n"
                f"–≠–º–æ–¥–∑–∏: {user.emoji}\n"
                f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–Ω–µ–π: {len(completions)}/{total_days if total_days > 0 else '?'}\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}"
            )
            
            await message.answer(profile_message)
    except Exception as e:
        logger.error(f"Error in cmd_profile: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")

@dp.message(Command("update"))
async def cmd_update(message: types.Message):
    try:
        user_id = message.from_user.id
        logger.info(f"Received /update command from user {user_id}")
        
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await session.execute(
                select(User)
                .where(User.telegram_id == user_id)
            )
            user = user.scalar_one_or_none()
            
            if not user:
                await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
            if not message.text or len(message.text.split()) < 2:
                await message.answer(
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "/update [–∏–º—è/—Ü–µ–ª—å/—ç–º–æ–¥–∑–∏] [–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ]\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã:\n"
                    "/update –∏–º—è –ò–≤–∞–Ω\n"
                    "/update —Ü–µ–ª—å –ë–µ–≥–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
                    "/update —ç–º–æ–¥–∑–∏ üèÉ"
                )
                return
            
            # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            parts = message.text.split(maxsplit=2)
            field = parts[1].lower()
            new_value = parts[2] if len(parts) > 2 else None
            
            if field not in ["–∏–º—è", "—Ü–µ–ª—å", "—ç–º–æ–¥–∑–∏"]:
                await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∏–º—è, —Ü–µ–ª—å –∏–ª–∏ —ç–º–æ–¥–∑–∏.")
                return
            
            if not new_value:
                await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            if field == "–∏–º—è":
                user.name = new_value
            elif field == "—Ü–µ–ª—å":
                user.goal = new_value
            elif field == "—ç–º–æ–¥–∑–∏":
                user.emoji = new_value
            
            await session.commit()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            await cmd_profile(message)
    except Exception as e:
        logger.error(f"Error in cmd_update: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")

@dp.message(Command("result"))
async def cmd_result(message: types.Message):
    try:
        logger.info(f"Received /result command from user {message.from_user.id}")
        
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await session.execute(select(User))
            users = users.scalars().all()
            
            if not users:
                await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            dates = await session.execute(
                select(Completion.date)
                .order_by(Completion.date)
            )
            dates = dates.scalars().all()
            
            if not dates:
                await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.")
                return
            
            first_date = dates[0]
            last_date = dates[-1]
            total_days = (last_date - first_date).days + 1
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result_message = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            
            for user in users:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                completions = await session.execute(
                    select(Completion)
                    .where(Completion.user_id == user.id)
                    .order_by(Completion.date)
                )
                completions = completions.scalars().all()
                
                completed_days = len(completions)
                result_message += f"{user.name} {user.emoji}: {completed_days}/{total_days}\n\n"
            
            await message.answer(result_message)
    except Exception as e:
        logger.error(f"Error in cmd_result: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

@dp.message(Command("result_day"))
async def cmd_result_day(message: types.Message):
    try:
        logger.info(f"Received /result_day command from user {message.from_user.id}")
        
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await session.execute(select(User))
            users = users.scalars().all()
            
            if not users:
                await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
            yesterday = datetime.now().date() - timedelta(days=1)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            result_message = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ {yesterday.strftime('%d.%m.%Y')}:\n\n"
            
            for user in users:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞ –≤—á–µ—Ä–∞
                completion = await session.execute(
                    select(Completion)
                    .where(
                        Completion.user_id == user.id,
                        Completion.date == yesterday
                    )
                )
                completion = completion.scalar_one_or_none()
                
                if completion:
                    result_message += f"{user.name} {user.emoji}: ‚úÖ\n"
                else:
                    result_message += f"{user.name} {user.emoji}: ‚ùå\n"
            
            await message.answer(result_message)
    except Exception as e:
        logger.error(f"Error in cmd_result_day: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å.")

@dp.message(Command("result_month"))
async def cmd_result_month(message: types.Message):
    try:
        logger.info(f"Received /result_month command from user {message.from_user.id}")
        
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await session.execute(select(User))
            users = users.scalars().all()
            
            if not users:
                await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            today = datetime.now().date()
            first_day = today.replace(day=1)
            if today.month == 12:
                last_day = today.replace(year=today.year + 1, month=1, day=1) - timedelta(days=1)
            else:
                last_day = today.replace(month=today.month + 1, day=1) - timedelta(days=1)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            result_message = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ {today.strftime('%B %Y')}:\n\n"
            
            for user in users:
                # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                completions = await session.execute(
                    select(Completion)
                    .where(
                        Completion.user_id == user.id,
                        Completion.date >= first_day,
                        Completion.date <= last_day
                    )
                    .order_by(Completion.date)
                )
                completions = completions.scalars().all()
                
                completed_days = len(completions)
                total_days = (last_day - first_day).days + 1
                result_message += f"{user.name} {user.emoji}: {completed_days}/{total_days}\n\n"
            
            await message.answer(result_message)
    except Exception as e:
        logger.error(f"Error in cmd_result_month: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Å—è—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

@dp.message(Command("result_step"))
async def cmd_result_step(message: types.Message):
    try:
        logger.info(f"Received /result_step command from user {message.from_user.id}")
        
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await session.execute(select(User))
            users = users.scalars().all()
            
            if not users:
                await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            dates = await session.execute(
                select(Completion.date)
                .distinct()
                .order_by(Completion.date)
            )
            dates = dates.scalars().all()
            
            if not dates:
                await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            result_message = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —à–∞–≥–∞–º:\n\n"
            
            for date in dates:
                result_message += f"{date.strftime('%d.%m.%Y')}:\n"
                for user in users:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    completion = await session.execute(
                        select(Completion)
                        .where(
                            Completion.user_id == user.id,
                            Completion.date == date
                        )
                    )
                    completion = completion.scalar_one_or_none()
                    
                    if completion:
                        result_message += f"{user.name} {user.emoji}\n"
                result_message += "\n"
            
            await message.answer(result_message)
    except Exception as e:
        logger.error(f"Error in cmd_result_step: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —à–∞–≥–∞–º.")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
/complete –î–î.–ú–ú.–ì–ì–ì–ì - –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
/result - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏
/result_day - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
/result_month - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
/result_step - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —à–∞–≥–∞–º
/profile - –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/update [–∏–º—è/—Ü–µ–ª—å/—ç–º–æ–¥–∑–∏] [–∑–Ω–∞—á–µ–Ω–∏–µ] - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
/stop - –£–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
"""
    await message.answer(help_text)

async def on_startup(bot: Bot) -> None:
    logger.info("Starting bot...")
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await bot.delete_webhook()
    logger.info("Webhook deleted")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"),
        BotCommand(command="complete", description="–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏"),
        BotCommand(command="result", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"),
        BotCommand(command="result_day", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –≤—á–µ—Ä–∞"),
        BotCommand(command="result_month", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü"),
        BotCommand(command="result_step", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —à–∞–≥–∞–º"),
        BotCommand(command="profile", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand(command="update", description="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è"),
        BotCommand(command="stop", description="–£–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ"),
        BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
    ]
    
    try:
        await bot.set_my_commands(commands=commands, scope=BotCommandScopeDefault())
        logger.info("Bot commands registered successfully")
    except Exception as e:
        logger.error(f"Error registering bot commands: {e}", exc_info=True)
    
    # –ü–æ–ª—É—á–∞–µ–º URL —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    webhook_url = os.getenv("WEBHOOK_URL")
    if webhook_url:
        logger.info(f"Setting webhook to {webhook_url}")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
        await bot.set_webhook(
            url=webhook_url,
            drop_pending_updates=True
        )
        logger.info("Webhook set successfully")

async def handle_root(request):
    logger.info("Root endpoint accessed")
    return web.Response(
        text="Challenge Bot is running! üöÄ\n\nThis is a Telegram bot for group challenges and goal tracking.\n\nBot is available at @Zaruba_resbot",
        content_type="text/plain"
    )

async def handle_webhook(request):
    logger.info("Webhook endpoint accessed")
    try:
        data = await request.json()
        logger.info(f"Received webhook data: {data}")
        return web.Response(text="OK")
    except Exception as e:
        logger.error(f"Error in webhook handler: {e}")
        return web.Response(status=500, text="Internal Server Error")

async def main():
    logger.info("Starting application...")
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    logger.info("Environment variables:")
    logger.info(f"TOKEN: {'*' * len(os.getenv('TOKEN', ''))}")
    logger.info(f"WEBHOOK_URL: {os.getenv('WEBHOOK_URL')}")
    logger.info(f"PORT: {os.getenv('PORT', 8000)}")
    logger.info(f"DB_URL: {os.getenv('DB_URL')}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    try:
        bot_info = await bot.get_me()
        logger.info(f"Bot information:")
        logger.info(f"Bot ID: {bot_info.id}")
        logger.info(f"Bot username: @{bot_info.username}")
        logger.info(f"Bot name: {bot_info.first_name}")
    except Exception as e:
        logger.error(f"Error getting bot info: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiohttp
    app = web.Application()
    app.router.add_get("/", handle_root)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_requests_handler.register(app, path="/webhook")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    port = int(os.getenv("PORT", 8000))
    logger.info(f"Application started on port {port}")
    await on_startup(bot)
    await web._run_app(app, port=port)

if __name__ == "__main__":
    asyncio.run(main()) 