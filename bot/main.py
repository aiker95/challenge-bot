import asyncio
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, BotCommand, BotCommandScopeDefault, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.enums import ChatType
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.exceptions import TelegramAPIError
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from sqlalchemy import select, text, func, case, distinct
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.callback_answer import CallbackAnswerMiddleware, CallbackAnswer
from aiogram.dispatcher.router import Router

from db.models import Base, User, Completion, create_async_engine_from_url, create_async_session

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –í–µ—Ä—Å–∏—è –±–æ—Ç–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
BOT_VERSION = "1.0.14"
LAST_UPDATE = "24.04.2025"
UPDATE_INFO = """
üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (v1.0.14):
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø—Ä–∞–≤–∫–∏
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /participants –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
"""

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ middleware –∫–ª–∞—Å—Å–æ–≤
class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self, limit=1):
        self.limit = limit
        self.last_time = {}
        self.retry_count = {}
        super().__init__()

    async def __call__(self, handler, event, data):
        if not isinstance(event, types.Message):
            return await handler(event, data)
            
        user_id = event.from_user.id
        current_time = datetime.now().timestamp()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        if user_id not in self.retry_count:
            self.retry_count[user_id] = 0
        
        # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –¥–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Ç–≤–µ—Ç
        if self.retry_count[user_id] > 0:
            self.limit = 5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö
        
        if user_id in self.last_time:
            if current_time - self.last_time[user_id] < self.limit:
                self.retry_count[user_id] += 1
                if self.retry_count[user_id] <= 3:  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏
                    await event.answer(
                        "‚è≥ –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                    )
                    return
                else:
                    await event.answer(
                        "‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                    return
        
        self.last_time[user_id] = current_time
        self.retry_count[user_id] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
        return await handler(event, data)

class LoggingMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        if isinstance(event, types.Message):
            logger.info(f"Handling message from user {event.from_user.id}: {event.text}")
        elif isinstance(event, types.CallbackQuery):
            logger.info(f"Handling callback query from user {event.from_user.id}: {event.data}")
        return await handler(event, data)

class CallbackLoggingMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        if isinstance(event, types.CallbackQuery):
            logger.info(f"Received callback query: {event.data} from user {event.from_user.id}")
            logger.debug(f"Callback details: {event}")
            start_time = datetime.now()
            result = await handler(event, data)
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            logger.info(f"Callback processed in {duration:.2f} seconds")
            return result
        return await handler(event, data)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher()
router = Router()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
dp.update.middleware(ThrottlingMiddleware())
dp.update.middleware(LoggingMiddleware())
dp.update.middleware(CallbackLoggingMiddleware())

# –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
dp.include_router(router)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_async_engine_from_url(os.getenv("DB_URL"))
async_session = create_async_session(engine)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
registration_states = {}
registration_locks = {}
update_states = {}

# –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
keep_alive_counter = 0

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@router.errors()
async def error_handler(update: types.Update, exception: Exception):
    logger.error(f"Update {update} caused error {exception}")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
    if isinstance(exception, (ConnectionError, TimeoutError)):
        if update.message:
            await update.message.answer(
                "‚è≥ –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        return True
    
    if isinstance(exception, TelegramAPIError):
        logger.error(f"Telegram API error: {exception}")
        if update.message:
            await update.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    return True

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏—á–Ω—ã–π —á–∞—Ç
async def is_private_chat(message: types.Message) -> bool:
    return message.chat.type == ChatType.PRIVATE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@router.message(Command("start"), F.chat.type == ChatType.PRIVATE)
async def cmd_start(message: types.Message):
    if not await is_private_chat(message):
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–ª–µ–π.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @Zaruba_resbot"
        )
        return
    try:
        user_id = message.from_user.id
        logger.info(f"Received /start command from user {user_id}")
        
        # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if user_id not in registration_locks:
            registration_locks[user_id] = asyncio.Lock()
            logger.info(f"Created new lock for user {user_id}")
        
        logger.info(f"Acquiring lock for user {user_id}")
        async with registration_locks[user_id]:
            logger.info(f"Lock acquired for user {user_id}")
            async with async_session() as session:
                async with session.begin():
                    result = await session.execute(
                        User.__table__.select().where(User.telegram_id == user_id)
                    )
                    user = result.first()
                    
                    if not user:
                        registration_states[user_id] = {
                            "step": 1,
                            "data": {},
                            "lock": asyncio.Lock()
                        }
                        logger.info(f"Starting registration for user {user_id}")
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                        keyboard = ReplyKeyboardMarkup(
                            keyboard=[
                                [KeyboardButton(text="–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")]
                            ],
                            resize_keyboard=True,
                            one_time_keyboard=True
                        )
                        
                        await message.answer(
                            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
                            reply_markup=keyboard
                        )
                    else:
                        logger.info(f"User {user_id} already registered")
                        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            logger.info(f"Releasing lock for user {user_id}")
    except Exception as e:
        logger.error(f"Error in cmd_start: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
async def start_registration(message: types.Message):
    try:
        user_id = message.from_user.id
        logger.info(f"Starting registration for user {user_id}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∏–º—è")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await message.answer(
            "–ü–µ—Ä–≤—ã–π —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–≤–æ–¥:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in start_registration: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "–í–≤–µ—Å—Ç–∏ –∏–º—è")
async def input_name(message: types.Message):
    try:
        user_id = message.from_user.id
        registration_states[user_id] = {"step": 1, "data": {}}
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.error(f"Error in input_name: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(lambda message: message.from_user.id in registration_states and registration_states[message.from_user.id]["step"] == 1)
async def process_name(message: types.Message):
    try:
        user_id = message.from_user.id
        name = message.text.strip()
        
        if len(name) < 2:
            await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        registration_states[user_id]["data"]["name"] = name
        registration_states[user_id]["step"] = 2
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Ü–µ–ª–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–í–≤–µ—Å—Ç–∏ —Ü–µ–ª—å")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await message.answer(
            f"–û—Ç–ª–∏—á–Ω–æ, {name}! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ë–µ–≥–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å' –∏–ª–∏ '–ß–∏—Ç–∞—Ç—å 30 –º–∏–Ω—É—Ç'\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–≤–æ–¥:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in process_name: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "–í–≤–µ—Å—Ç–∏ —Ü–µ–ª—å")
async def input_goal(message: types.Message):
    try:
        user_id = message.from_user.id
        if user_id not in registration_states:
            await message.answer("–ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
            return
            
        registration_states[user_id]["step"] = 2
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.error(f"Error in input_goal: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(lambda message: message.from_user.id in registration_states and registration_states[message.from_user.id]["step"] == 2)
async def process_goal(message: types.Message):
    try:
        user_id = message.from_user.id
        goal = message.text.strip()
        
        if len(goal) < 5:
            await message.answer("–¶–µ–ª—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        registration_states[user_id]["data"]["goal"] = goal
        registration_states[user_id]["step"] = 3
        
        await message.answer(
            f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä—è–¥–æ–º —Å –≤–∞—à–∏–º –∏–º–µ–Ω–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: üèÉ, üìö, üí™, üßò, üéØ –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —ç–º–æ–¥–∑–∏ –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä"
        )
    except Exception as e:
        logger.error(f"Error in process_goal: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def confirm_registration(message: types.Message):
    try:
        user_id = message.from_user.id
        
        if user_id not in registration_states:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
            return
            
        data = registration_states[user_id]["data"]
        
        async with async_session() as session:
            async with session.begin():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                result = await session.execute(
                    select(User)
                    .where(User.telegram_id == user_id)
                )
                existing_user = result.scalar_one_or_none()
                
                if existing_user:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    existing_user.name = data["name"]
                    existing_user.goal = data["goal"]
                    existing_user.emoji = data["emoji"]
                    await session.commit()
                    await message.answer("‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=ReplyKeyboardRemove())
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    new_user = User(
                        telegram_id=user_id,
                        name=data["name"],
                        goal=data["goal"],
                        emoji=data["emoji"]
                    )
                    session.add(new_user)
                    await session.commit()
                    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=ReplyKeyboardRemove())
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                del registration_states[user_id]
                
    except Exception as e:
        logger.error(f"Error in confirm_registration: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(lambda message: message.from_user.id in registration_states and registration_states[message.from_user.id]["step"] == 3)
async def process_emoji(message: types.Message):
    try:
        user_id = message.from_user.id
        emoji = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if emoji == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
            await confirm_registration(message)
            return
            
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ —ç–º–æ–¥–∑–∏
        registration_states[user_id]["data"]["emoji"] = emoji
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = registration_states[user_id]["data"]
        name = data.get("name", "")
        goal = data.get("goal", "")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"üë§ –ò–º—è: {name}\n"
            f"üéØ –¶–µ–ª—å: {goal}\n"
            f"üòä –≠–º–æ–¥–∑–∏: {emoji}\n\n"
            f"–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'.",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in process_emoji: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("update"), F.chat.type == ChatType.PRIVATE)
async def cmd_update(message: types.Message):
    if not await is_private_chat(message):
        bot_info = await bot.get_me()
        await message.answer(
            "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=await get_switch_pm_button(bot_info.username)
        )
        return
    try:
        user_id = message.from_user.id
        logger.info(f"Received /update command from user {user_id}")
        
        async with async_session() as session:
            async with session.begin():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                result = await session.execute(
                    select(User)
                    .where(User.telegram_id == user_id)
                )
                user = result.scalar_one_or_none()
                
                if not user:
                    await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")],
                        [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å")],
                        [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —ç–º–æ–¥–∑–∏")]
                    ],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
                
                await message.answer(
                    "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                    reply_markup=keyboard
                )
    except Exception as e:
        logger.error(f"Error in cmd_update: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text.in_(["–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", "–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å", "–ò–∑–º–µ–Ω–∏—Ç—å —ç–º–æ–¥–∑–∏"]))
async def update_field(message: types.Message):
    try:
        user_id = message.from_user.id
        field = message.text.split()[1].lower()  # –ü–æ–ª—É—á–∞–µ–º "–∏–º—è", "—Ü–µ–ª—å" –∏–ª–∏ "—ç–º–æ–¥–∑–∏"
        
        async with async_session() as session:
            async with session.begin():
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
                result = await session.execute(
                    select(User)
                    .where(User.telegram_id == user_id)
                )
                user = result.scalar_one_or_none()
                
                if not user:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                    return
                    
                update_states[user_id] = field
                
                if field == "—ç–º–æ–¥–∑–∏":
                    await message.answer(
                        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä—è–¥–æ–º —Å –≤–∞—à–∏–º –∏–º–µ–Ω–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.\n"
                        "–ù–∞–ø—Ä–∏–º–µ—Ä: üèÉ, üìö, üí™, üßò, üéØ –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —ç–º–æ–¥–∑–∏ –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä",
                        reply_markup=ReplyKeyboardRemove()
                    )
                else:
                    field_names = {
                        "–∏–º—è": "–∏–º—è",
                        "—Ü–µ–ª—å": "—Ü–µ–ª—å"
                    }
                    await message.answer(
                        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_names[field]}:",
                        reply_markup=ReplyKeyboardRemove()
                    )
    except Exception as e:
        logger.error(f"Error in update_field: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(lambda message: message.from_user.id in update_states)
async def process_field_update(message: types.Message):
    try:
        user_id = message.from_user.id
        field = update_states[user_id]
        value = message.text.strip()
        
        if field in ["–∏–º—è", "—Ü–µ–ª—å"]:
            min_length = 2 if field == "–∏–º—è" else 5
            if len(value) < min_length:
                await message.answer(f"{'–ò–º—è' if field == '–∏–º—è' else '–¶–µ–ª—å'} –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º {min_length} —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
        
        async with async_session() as session:
            async with session.begin():
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
                result = await session.execute(
                    select(User)
                    .where(User.telegram_id == user_id)
                )
                user = result.scalar_one_or_none()
                
                if not user:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                    return
                
                if field == "–∏–º—è":
                    user.name = value
                elif field == "—Ü–µ–ª—å":
                    user.goal = value
                elif field == "—ç–º–æ–¥–∑–∏":
                    user.emoji = value
                
                await session.commit()
                del update_states[user_id]
                
                await message.answer(f"‚úÖ {field.capitalize()} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                await cmd_profile(message)
    except Exception as e:
        logger.error(f"Error in process_field_update: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä ChatTypeFilter –∫ –æ—Å—Ç–∞–ª—å–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º –ø—Ä–æ—Ñ–∏–ª—è
@router.message(Command("profile"), F.chat.type == ChatType.PRIVATE)
async def cmd_profile(message: types.Message):
    if not await is_private_chat(message):
        await message.answer(
            "–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @Zaruba_resbot"
        )
        return
    try:
        user_id = message.from_user.id
        logger.info(f"Received /profile command from user {user_id}")
        
        async with async_session() as session:
            async with session.begin():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                result = await session.execute(
                    select(User)
                    .where(User.telegram_id == user_id)
                )
                user = result.scalar_one_or_none()
                
                if not user:
                    await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                    return
            
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                completions = await session.execute(
                    select(Completion)
                    .where(Completion.user_id == user.id)
                    .order_by(Completion.date)
                )
                completions = completions.scalars().all()
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                dates = await session.execute(
                    select(Completion.date)
                    .order_by(Completion.date)
                )
                dates = dates.scalars().all()
                
                total_days = 0
                if dates:
                    first_date = dates[0]
                    last_date = dates[-1]
                    total_days = (last_date - first_date).days + 1
                
                profile_message = (
                    f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                    f"–ò–º—è: {user.name}\n"
                    f"–¶–µ–ª—å: {user.goal}\n"
                    f"–≠–º–æ–¥–∑–∏: {user.emoji}\n"
                    f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–Ω–µ–π: {len(completions)}/{total_days if total_days > 0 else '?'}\n"
                    f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}"
                )
                
                await message.answer(profile_message)
    except Exception as e:
        logger.error(f"Error in cmd_profile: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")

@router.message(Command("stop"), F.chat.type == ChatType.PRIVATE)
async def cmd_stop(message: types.Message):
    if not await is_private_chat(message):
        bot_info = await bot.get_me()
        await message.answer(
            "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=await get_switch_pm_button(bot_info.username)
        )
        return
    try:
        user_id = message.from_user.id
        logger.info(f"Received /stop command from user {user_id}")
        
        async with async_session() as session:
            async with session.begin():
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
                result = await session.execute(
                    select(User)
                    .where(User.telegram_id == user_id)
                )
                user = result.scalar_one_or_none()
                
                if user:
                    await session.delete(user)
                    await session.commit()
                    await message.answer(
                        "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã",
                        reply_markup=ReplyKeyboardRemove()
                    )
                else:
                    await message.answer(
                        "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        reply_markup=ReplyKeyboardRemove()
                    )
    except Exception as e:
        logger.error(f"Error in cmd_stop: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å")
async def confirm_stop(message: types.Message):
    try:
        user_id = message.from_user.id
        
        async with async_session() as session:
            async with session.begin():
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
                result = await session.execute(
                    select(User)
                    .where(User.telegram_id == user_id)
                )
                user = result.scalar_one_or_none()
                
                if user:
                    await session.delete(user)
                    await session.commit()
                    await message.answer(
                        "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã",
                        reply_markup=ReplyKeyboardRemove()
                    )
                else:
                    await message.answer(
                        "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        reply_markup=ReplyKeyboardRemove()
                    )
    except Exception as e:
        logger.error(f"Error in confirm_stop: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_stop(message: types.Message):
    try:
        await message.answer(
            "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.error(f"Error in cancel_stop: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def get_switch_pm_button(bot_username: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
            url=f"https://t.me/{bot_username}?start=group_redirect"
        )
    )
    return builder.as_markup()

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
@router.message(Command("start"))
async def cmd_start_group(message: types.Message):
    if message.chat.type != ChatType.PRIVATE:
        bot_info = await bot.get_me()
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–ª–µ–π.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=await get_switch_pm_button(bot_info.username)
        )
        return

@router.message(Command("profile"))
async def cmd_profile_group(message: types.Message):
    if message.chat.type != ChatType.PRIVATE:
        bot_info = await bot.get_me()
        await message.answer(
            "–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=await get_switch_pm_button(bot_info.username)
        )
        return

@router.message(Command("update"))
async def cmd_update_group(message: types.Message):
    if message.chat.type != ChatType.PRIVATE:
        bot_info = await bot.get_me()
        await message.answer(
            "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=await get_switch_pm_button(bot_info.username)
        )
        return

@router.message(Command("stop"))
async def cmd_stop_group(message: types.Message):
    if message.chat.type != ChatType.PRIVATE:
        bot_info = await bot.get_me()
        await message.answer(
            "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=await get_switch_pm_button(bot_info.username)
        )
        return

@router.message(Command("result"))
async def cmd_result(message: types.Message):
    try:
        user_id = message.from_user.id
        logger.info(f"Received /result command from user {user_id}")
        
        async with async_session() as session:
            async with session.begin():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                result = await session.execute(
                    select(User)
                    .where(User.telegram_id == user_id)
                )
                user = result.scalar_one_or_none()
                
                if not user:
                    await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                    return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–í—Å–µ")],
                [KeyboardButton(text="–î–µ–Ω—å")],
                [KeyboardButton(text="–ú–µ—Å—è—Ü")],
                [KeyboardButton(text="–ì–æ–¥")],
                [KeyboardButton(text="–ü–æ —à–∞–≥–∞–º")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in cmd_result: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

@router.message(F.text.in_(["–í—Å–µ", "–î–µ–Ω—å", "–ú–µ—Å—è—Ü", "–ì–æ–¥", "–ü–æ —à–∞–≥–∞–º"]))
async def process_result_type(message: types.Message):
    try:
        async with async_session() as session:
            async with session.begin():
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users = await session.execute(select(User))
                users = users.scalars().all()
                
                if not users:
                    await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                    return
                
                if message.text == "–î–µ–Ω—å":
                    # –ü–æ–ª—É—á–∞–µ–º –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
                    yesterday = datetime.now().date() - timedelta(days=1)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    result_message = f"–ò—Ç–æ–≥–∏ {yesterday.strftime('%d.%m.%Y')}\n\n"
                    
                    # –°–ø–∏—Å–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö
                    completed = []
                    missed = []
                    
                    for user in users:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞ –≤—á–µ—Ä–∞
                        completion = await session.execute(
                            select(Completion)
                            .where(
                                Completion.user_id == user.id,
                                Completion.date == yesterday
                            )
                        )
                        completion = completion.scalar_one_or_none()
                        
                        if completion:
                            completed.append(f"{user.emoji} {user.name} ‚úÖ")
                        else:
                            missed.append(f"{user.emoji} {user.name} ‚ùå")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
                    result_message += f"–í—ã–ø–æ–ª–Ω–∏–ª–∏: {len(completed)}/{len(users)}\n"
                    for user in completed:
                        result_message += f"{user}\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö
                    if missed:
                        result_message += f"\n–ü—Ä–æ–ø—É—Å—Ç–∏–ª–∏: {len(missed)}/{len(users)}\n"
                        for user in missed:
                            result_message += f"{user}\n"
                    
                    await message.answer(result_message, reply_markup=ReplyKeyboardRemove())
                
                elif message.text == "–í—Å–µ":
                    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    dates = await session.execute(
                        select(Completion.date)
                        .order_by(Completion.date)
                    )
                    dates = dates.scalars().all()
                    
                    if not dates:
                        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.")
                        return
                    
                    first_date = dates[0]
                    last_date = dates[-1]
                    total_days = (last_date - first_date).days + 1
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    result_message = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
                    
                    for user in users:
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        completions = await session.execute(
                            select(Completion)
                            .where(Completion.user_id == user.id)
                            .order_by(Completion.date)
                        )
                        completions = completions.scalars().all()
                        
                        completed_days = len(completions)
                        result_message += f"{user.name} {user.emoji}: {completed_days}/{total_days}\n\n"
                    
                    await message.answer(result_message, reply_markup=ReplyKeyboardRemove())
                
                elif message.text == "–ú–µ—Å—è—Ü":
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                    today = datetime.now().date()
                    first_day = today.replace(day=1)
                    if today.month == 12:
                        last_day = today.replace(year=today.year + 1, month=1, day=1) - timedelta(days=1)
                    else:
                        last_day = today.replace(month=today.month + 1, day=1) - timedelta(days=1)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    result_message = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ {today.strftime('%B %Y')}:\n\n"
                    
                    for user in users:
                        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                        completions = await session.execute(
                            select(Completion)
                            .where(
                                Completion.user_id == user.id,
                                Completion.date >= first_day,
                                Completion.date <= last_day
                            )
                            .order_by(Completion.date)
                        )
                        completions = completions.scalars().all()
                        
                        completed_days = len(completions)
                        total_days = (last_day - first_day).days + 1
                        result_message += f"{user.name} {user.emoji}: {completed_days}/{total_days}\n\n"
                    
                    await message.answer(result_message, reply_markup=ReplyKeyboardRemove())
                
                elif message.text == "–ì–æ–¥":
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
                    today = datetime.now().date()
                    first_day = today.replace(month=1, day=1)
                    last_day = today.replace(month=12, day=31)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    result_message = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ {today.year} –≥–æ–¥:\n\n"
                    
                    for user in users:
                        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥
                        completions = await session.execute(
                            select(Completion)
                            .where(
                                Completion.user_id == user.id,
                                Completion.date >= first_day,
                                Completion.date <= last_day
                            )
                            .order_by(Completion.date)
                        )
                        completions = completions.scalars().all()
                        
                        completed_days = len(completions)
                        total_days = (last_day - first_day).days + 1
                        result_message += f"{user.name} {user.emoji}: {completed_days}/{total_days}\n\n"
                    
                    await message.answer(result_message, reply_markup=ReplyKeyboardRemove())
                
                elif message.text == "–ü–æ —à–∞–≥–∞–º":
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    dates = await session.execute(
                        select(Completion.date)
                        .distinct()
                        .order_by(Completion.date)
                    )
                    dates = dates.scalars().all()
                    
                    if not dates:
                        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.")
                        return
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    result_message = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —à–∞–≥–∞–º:\n\n"
                    
                    for date in dates:
                        result_message += f"{date.strftime('%d.%m.%Y')}:\n"
                        for user in users:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            completion = await session.execute(
                                select(Completion)
                                .where(
                                    Completion.user_id == user.id,
                                    Completion.date == date
                                )
                            )
                            completion = completion.scalar_one_or_none()
                            
                            if completion:
                                result_message += f"{user.name} {user.emoji}\n"
                        result_message += "\n"
                    
                    await message.answer(result_message, reply_markup=ReplyKeyboardRemove())
                
    except Exception as e:
        logger.error(f"Error in process_result_type: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

@router.message(Command("participants"))
async def cmd_participants(message: types.Message):
    try:
        async with async_session() as session:
            async with session.begin():
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                result = await session.execute(select(User))
                users = result.scalars().all()
                
                if not users:
                    await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                participants_message = "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ó–∞—Ä—É–±—ã:\n\n"
                
                for user in users:
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    completions = await session.execute(
                        select(Completion)
                        .where(Completion.user_id == user.id)
                        .order_by(Completion.date)
                    )
                    completions = completions.scalars().all()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    dates = await session.execute(
                        select(Completion.date)
                        .order_by(Completion.date)
                    )
                    dates = dates.scalars().all()
                    
                    total_days = 0
                    if dates:
                        first_date = dates[0]
                        last_date = dates[-1]
                        total_days = (last_date - first_date).days + 1
                    
                    participants_message += (
                        f"üë§ {user.emoji} {user.name}\n"
                        f"üéØ –¶–µ–ª—å: {user.goal}\n"
                        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(completions)}/{total_days if total_days > 0 else '?'}\n"
                        f"üìÖ –°: {user.created_at.strftime('%d.%m.%Y')}\n\n"
                    )
                
                await message.answer(participants_message)
    except Exception as e:
        logger.error(f"Error in cmd_participants: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")

@router.message(Command("help"), F.chat.type == ChatType.PRIVATE)
async def cmd_help(message: types.Message):
    help_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üì± –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è):
/start - –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
/profile - –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/update - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
/stop - –£–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
/participants - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

üë• –í –ª—é–±–æ–º —á–∞—Ç–µ:
/complete - –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏
/result - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
/participants - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

‚ùì –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º):
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/info - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è

üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –î–ª—è –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è" –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.
"""
    await message.answer(help_text)

@router.message(Command("info"))
async def cmd_info(message: types.Message):
    info_text = """
ü§ñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

1Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ /start –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
‚Ä¢ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é —Ü–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ë–µ–≥–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å")
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ

2Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è):
‚Ä¢ /complete - –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ (–∫–Ω–æ–ø–∫–∏ "–°–µ–≥–æ–¥–Ω—è" –∏–ª–∏ "–í—á–µ—Ä–∞")
‚Ä¢ /profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)
‚Ä¢ /update - –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)
‚Ä¢ /stop - –£–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)
‚Ä¢ /result - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
‚Ä¢ /participants - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å

3Ô∏è‚É£ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
‚Ä¢ /result - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞:
  - –í—Å–µ: –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  - –î–µ–Ω—å: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –≤—á–µ—Ä–∞
  - –ú–µ—Å—è—Ü: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
  - –ì–æ–¥: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥
  - –ü–æ —à–∞–≥–∞–º: –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
‚Ä¢ /participants - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å

4Ô∏è‚É£ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º):
‚Ä¢ /help - –ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)
‚Ä¢ /info - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é

üìù –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
‚Ä¢ –û—Ç–º–µ—á–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–π —á–µ—Å—Ç–Ω–æ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–ª–∏
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Ä–∞–∂–∞—é—Ç –≤–∞—à—É —Ü–µ–ª—å
‚Ä¢ –ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –∫–æ–º–∞–Ω–¥–∞–º–∏

‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥
‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
‚Ä¢ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –î–ª—è –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è" –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.
"""
    await message.answer(info_text)

@router.message(Command("complete"))
async def cmd_complete(message: types.Message):
    try:
        user_id = message.from_user.id
        logger.info(f"Received /complete command from user {user_id}")
        
        async with async_session() as session:
            async with session.begin():
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
                result = await session.execute(
                    select(User)
                    .where(User.telegram_id == user_id)
                )
                user = result.scalar_one_or_none()
                
                if not user:
                    await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–µ–≥–æ–¥–Ω—è" –∏ "–í—á–µ—Ä–∞"
                keyboard = ReplyKeyboardMarkup(
                    keyboard=[
                        [
                            KeyboardButton(text="–°–µ–≥–æ–¥–Ω—è"),
                            KeyboardButton(text="–í—á–µ—Ä–∞")
                        ]
                    ],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
                
                await message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–∏:",
                    reply_markup=keyboard
                )
    except Exception as e:
        logger.error(f"Error in cmd_complete: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text.in_(["–°–µ–≥–æ–¥–Ω—è", "–í—á–µ—Ä–∞"]))
async def process_complete_date(message: types.Message):
    try:
        user_id = message.from_user.id
        date = datetime.now().date() if message.text == "–°–µ–≥–æ–¥–Ω—è" else datetime.now().date() - timedelta(days=1)
        
        async with async_session() as session:
            async with session.begin():
                result = await session.execute(
                    select(User)
                    .where(User.telegram_id == user_id)
                )
                user = result.scalar_one_or_none()
                
                if not user:
                    await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
                result = await session.execute(
                    select(Completion)
                    .where(
                        Completion.user_id == user.id,
                        Completion.date == date
                    )
                )
                existing_completion = result.scalar_one_or_none()
                
                if existing_completion:
                    await message.answer(
                        f"–í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {date.strftime('%d.%m.%Y')}",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    return
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                new_completion = Completion(
                    user_id=user.id,
                    date=date
                )
                session.add(new_completion)
                await session.commit()
                
                await message.answer(
                    f"‚úÖ –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {date.strftime('%d.%m.%Y')}!",
                    reply_markup=ReplyKeyboardRemove()
                )
    except Exception as e:
        logger.error(f"Error in process_complete_date: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def on_startup(bot: Bot) -> None:
    logger.info("Starting bot...")
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await bot.delete_webhook()
    logger.info("Webhook deleted")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"),
        BotCommand(command="complete", description="–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏"),
        BotCommand(command="result", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"),
        BotCommand(command="profile", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand(command="update", description="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è"),
        BotCommand(command="stop", description="–£–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ"),
        BotCommand(command="participants", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"),
        BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        BotCommand(command="info", description="–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
        BotCommand(command="version", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏")
    ]
    
    try:
        await bot.set_my_commands(commands=commands, scope=BotCommandScopeDefault())
        logger.info("Bot commands registered successfully")
    except Exception as e:
        logger.error(f"Error registering bot commands: {e}", exc_info=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–µ—Ä—Å–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    try:
        async with async_session() as session:
            async with session.begin():
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                result = await session.execute(select(User))
                users = result.scalars().all()
                
                for user in users:
                    try:
                        await bot.send_message(
                            user.telegram_id,
                            f"ü§ñ –ë–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –≤–µ—Ä—Å–∏–∏ {BOT_VERSION}\n\n"
                            f"{UPDATE_INFO}\n"
                            f"üìÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {LAST_UPDATE}"
                        )
                    except Exception as e:
                        logger.error(f"Error sending version notification to user {user.telegram_id}: {e}")
    except Exception as e:
        logger.error(f"Error sending version notifications: {e}")

@router.message(Command("version"))
async def cmd_version(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞"""
    version_message = (
        f"ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏:\n\n"
        f"–í–µ—Ä—Å–∏—è: {BOT_VERSION}\n"
        f"–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {LAST_UPDATE}\n\n"
        f"{UPDATE_INFO}"
    )
    await message.answer(version_message)

async def handle_root(request):
    logger.info("Root endpoint accessed")
    return web.Response(
        text="Challenge Bot is running! üöÄ\n\nThis is a Telegram bot for group challenges and goal tracking.\n\nBot is available at @Zaruba_resbot",
        content_type="text/plain"
    )

async def keep_alive_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    global keep_alive_counter
    while True:
        try:
            # –ü—Ä–æ—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            keep_alive_counter += 1
            keep_alive_counter -= 1
            
            # –ü–∏–Ω–≥ –∫ Telegram API
            try:
                await bot.get_me()
            except Exception as e:
                logger.error(f"Telegram API ping failed: {str(e)}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ–∑–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            async with async_session() as session:
                async with session.begin():
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                    result = await session.execute(
                        select(
                            func.count().label('total_users'),
                            func.count(case((User.created_at >= datetime.now() - timedelta(days=7), 1))).label('new_users'),
                            func.count(distinct(Completion.user_id)).label('active_users')
                        ).select_from(User)
                        .outerjoin(Completion, User.id == Completion.user_id)
                    )
                    stats = result.first()
                    
                    if stats:
                        logger.info(
                            f"–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - {stats.total_users}, "
                            f"–Ω–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é - {stats.new_users}, "
                            f"–∞–∫—Ç–∏–≤–Ω—ã—Ö - {stats.active_users}"
                        )
            
            # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
            await asyncio.sleep(10)
        except Exception as e:
            logger.error(f"Error in keep-alive task: {str(e)}")
            await asyncio.sleep(10)

async def main():
    logger.info("Starting application...")
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    logger.info("Environment variables:")
    logger.info(f"TOKEN: {'*' * len(os.getenv('TOKEN', ''))}")
    logger.info(f"WEBHOOK_URL: {os.getenv('WEBHOOK_URL')}")
    logger.info(f"PORT: {os.getenv('PORT', 8000)}")
    logger.info(f"DB_URL: {os.getenv('DB_URL')}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    try:
        bot_info = await bot.get_me()
        logger.info(f"Bot information:")
        logger.info(f"Bot ID: {bot_info.id}")
        logger.info(f"Bot username: @{bot_info.username}")
        logger.info(f"Bot name: {bot_info.first_name}")
    except Exception as e:
        logger.error(f"Error getting bot info: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiohttp
    app = web.Application()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π endpoint
    app.router.add_get("/", handle_root)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
    webhook_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
        handle_in_background=True
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
    app.router.add_post("/webhook", webhook_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    port = int(os.getenv("PORT", 8000))
    logger.info(f"Application started on port {port}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    await on_startup(bot)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    webhook_url = os.getenv("WEBHOOK_URL")
    if webhook_url:
        logger.info(f"Setting webhook to {webhook_url}")
        await bot.set_webhook(
            url=webhook_url,
            drop_pending_updates=True
        )
        logger.info("Webhook set successfully")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(keep_alive_task())
    logger.info("Keep-alive task started")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    await web._run_app(app, port=port)

if __name__ == "__main__":
    asyncio.run(main()) 